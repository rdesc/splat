import numpy as np
import matplotlib.pyplot as plt 
import quaternion

def interpolate_poses(R1, t1, R2, t2, frequency=10):
    view_matrices = []
    q1 = quaternion.from_rotation_matrix(R1)
    q2 = quaternion.from_rotation_matrix(R2)
    for i in range(frequency):
        interval = (i / frequency) 
        t = t1 * (1 - interval) + t2 * interval
        # slerp interpolation
        if q1.w*q2.w + q1.x*q2.x + q1.y*q2.y + q1.z*q2.z < 0.0:
            q2 = -q2
        q = np.power((q2 * np.conjugate(q1)), interval) * q1
        q = q / np.sqrt(q.w**2 + q.x**2 + q.y**2 + q.z**2)
        R = quaternion.as_rotation_matrix(q)

        view_matrix = np.zeros((4,4))
        view_matrix[:3, :3] = R 
        view_matrix[-1, -1] = 1
        view_matrix[3, :3] = -1 * R.T @ t
        view_matrix = np.round(view_matrix, decimals=2).flatten()

        view_matrices.append(view_matrix)
    
    return view_matrices

# one loop around track
view_matrices = [
    [0.02,-0.01,-1,0,-0.81,0.58,-0.03,0,0.58,0.83,0,0,-2.37,-1.6,2,1],
    [0.02,-0.01,-1,0,-0.81,0.58,-0.03,0,0.58,0.83,0,0,-2.37,-1.6,1.5,1],
    [0.02,-0.01,-1,0,-0.81,0.58,-0.03,0,0.58,0.83,0,0,-2.37,-1.6,1.1,1],
    [0.02,-0.01,-1,0,-0.81,0.58,-0.03,0,0.58,0.83,0,0,-2.37,-1.6,0.5,1],
    [0.02,-0.01,-1,0,-0.81,0.58,-0.03,0,0.58,0.83,0,0,-2.37,-1.6,0.1,1],
    [0.02,-0.01,-1,0,-0.81,0.58,-0.03,0,0.58,0.83,0,0,-2.37,-1.6,-0.5,1],
    [0.02,-0.01,-1,0,-0.81,0.58,-0.03,0,0.58,0.83,0,0,-2.37,-1.6,-1.1,1],
    [0.02,-0.01,-1,0,-0.81,0.58,-0.03,0,0.58,0.83,0,0,-2.37,-1.6,-1.5,1],
    [-0.07,-0.01,-1,0,-0.81,0.58,0.04,0,0.58,0.83,-0.05,0,-2.5,-1.6,-1.68,1],
    [-0.21,-0.01,-0.98,0,-0.8,0.58,0.15,0,0.57,0.83,-0.13,0,-2.73,-1.6,-1.91,1],
    [-0.77,-0.01,-0.64,0,-0.53,0.58,0.61,0,0.37,0.83,-0.46,0,-3.47,-1.6,-0.18,1],
    [-0.93,-0.01,-0.37,0,-0.31,0.58,0.75,0,0.21,0.83,-0.55,0,-3.35,-1.6,0.62,1],
    [-1,-0.01,-0.1,0,-0.09,0.58,0.81,0,0.05,0.83,-0.58,0,-3.12,-1.6,1.22,1],
    [-1,-0.01,-0.06,0,-0.06,0.58,0.81,0,0.03,0.83,-0.58,0,-3.08,-1.6,1.04,1],
    [-1,-0.01,-0.06,0,-0.06,0.58,0.81,0,0.03,0.83,-0.58,0,-3.08,-1.6,0.64,1],
    [-1,-0.01,-0.04,0,-0.04,0.58,0.81,0,0.02,0.83,-0.58,0,-3.07,-1.6,0.4,1],
    [-1,-0.01,0,0,-0.01,0.58,0.81,0,0,0.83,-0.58,0,-3.06,-1.6,0.22,1],
    [-1,-0.01,0.06,0,0.04,0.58,0.81,0,-0.03,0.83,-0.58,0,-3.04,-1.6,0,1],
    [-0.95,-0.01,0.31,0,0.24,0.58,0.77,0,-0.17,0.83,-0.55,0,-3.02,-1.6,0.46,1],
    [-0.69,-0.01,0.73,0,0.58,0.58,0.56,0,-0.41,0.83,-0.4,0,-2.67,-1.6,1.41,1],
    [-0.51,-0.01,0.86,0,0.69,0.58,0.42,0,-0.49,0.83,-0.3,0,-2.36,-1.6,1.67,1],
    [-0.44,-0.01,0.9,0,0.72,0.58,0.36,0,-0.51,0.83,-0.26,0,-2.22,-1.6,1.45,1],
    [-0.33,-0.01,0.95,0,0.76,0.58,0.27,0,-0.54,0.83,-0.2,0,-2.03,-1.6,1.41,1],
    [-0.21,-0.01,0.98,0,0.79,0.58,0.18,0,-0.56,0.83,-0.13,0,-1.85,-1.6,1.24,1],
    [-0.13,-0.01,0.99,0,0.8,0.58,0.12,0,-0.57,0.83,-0.08,0,-1.74,-1.6,0.98,1],
    [-0.13,-0.01,0.99,0,0.8,0.58,0.12,0,-0.57,0.83,-0.08,0,-1.68,-1.6,0.18,1],
    [-0.13,-0.01,0.99,0,0.8,0.58,0.12,0,-0.57,0.83,-0.08,0,-1.62,-1.6,-0.32,1],
    [-0.13,-0.01,0.99,0,0.8,0.58,0.12,0,-0.57,0.83,-0.08,0,-1.56,-1.6,-0.92,1],
    [-0.01,-0.01,1,0,0.81,0.58,0.02,0,-0.58,0.83,-0.01,0,-1.66,-1.6,-1.23,1],
    [0.19,-0.01,0.98,0,0.8,0.58,-0.14,0,-0.57,0.83,0.11,0,-1.93,-1.6,-1.37,1],
    [0.5,-0.01,0.87,0,0.71,0.58,-0.39,0,-0.5,0.83,0.29,0,-2.4,-1.6,-1.05,1],
    [0.77,-0.01,0.65,0,0.53,0.58,-0.61,0,-0.37,0.83,0.44,0,-2.75,-1.6,-0.54,1],
    [0.77,-0.01,0.65,0,0.53,0.58,-0.61,0,-0.37,0.83,0.44,0,-2.75,-1.6,-0.54,1],
    [0.85,-0.01,0.54,0,0.45,0.58,-0.67,0,-0.31,0.83,0.48,0,-2.8,-1.6,-0.68,1],
    [0.98,-0.01,0.23,0,0.2,0.58,-0.78,0,-0.13,0.83,0.56,0,-2.97,-1.6,0.01,1],
    [1,-0.01,0.06,0,0.07,0.58,-0.8,0,-0.03,0.83,0.57,0,-2.99,-1.6,0.12,1],
    [1,-0.01,0.06,0,0.07,0.58,-0.8,0,-0.03,0.83,0.57,0,-2.96,-1.6,-0.48,1],
    [1,-0.01,0.06,0,0.07,0.58,-0.8,0,-0.03,0.83,0.57,0,-2.9,-1.6,-1.18,1],
    [1,-0.01,-0.07,0,-0.03,0.58,-0.8,0,0.04,0.83,0.57,0,-3.03,-1.6,-1.29,1],
    [0.94,-0.01,-0.34,0,-0.25,0.58,-0.76,0,0.2,0.83,0.54,0,-3.27,-1.6,-0.8,1],
    [0.46,-0.01,-0.89,0,-0.7,0.58,-0.39,0,0.51,0.83,0.26,0,-3.09,-1.6,1.17,1],
    [0.02,-0.01,-1,0,-0.81,0.58,-0.03,0,0.58,0.83,0,0,-2.37,-1.6,2,1]
]

view_matrices = [np.array(view_matrix).reshape(4, 4) for view_matrix in view_matrices]
view_matrices_start = view_matrices[:-1]
view_matrices_end = view_matrices[1:]

interpolated_view_matrices = []
for M1, M2 in zip(view_matrices_start, view_matrices_end):
    R1 = M1[:3, :3]
    R2 = M2[:3, :3]
    
    T1 = M1[3, :3]
    t1 = -R1 @ T1
    T2 = M2[3, :3]
    t2 = -R2 @ T2

    interpolated_view_matrices.append(interpolate_poses(R1, t1, R2, t2))

interpolated_view_matrices = np.concatenate(interpolated_view_matrices, axis=0)

# VISUALIZE INTERPOLATED TRACK
# coords = []
# for M in interpolated_view_matrices:
#     M = M.reshape(4, 4)
#     R = M[:3, :3]
#     T = M[3, :3]
#     t = -R @ T
#     coords.append(t)

# coords = np.array(coords)
# fig = plt.figure()
# ax = fig.add_subplot(projection='3d')
# ax.scatter3D(coords[:, 0], coords[:, 1], coords[:, 2])
# plt.show()

# Put into javascript code
for li in interpolated_view_matrices.tolist():
    print(f"{li},")
